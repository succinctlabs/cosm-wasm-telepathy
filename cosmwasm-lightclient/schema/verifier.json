{
  "contract_name": "verifier",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Message type for `instantiate` entry_point",
    "type": "object",
    "required": [
      "genesis_time",
      "genesis_validators_root",
      "seconds_per_slot",
      "slots_per_period",
      "sync_committee_period",
      "sync_committee_poseidon"
    ],
    "properties": {
      "genesis_time": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "genesis_validators_root": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "maxItems": 32,
        "minItems": 32
      },
      "seconds_per_slot": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "slots_per_period": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "sync_committee_period": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "sync_committee_poseidon": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "maxItems": 32,
        "minItems": 32
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Message type for 'execute' entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "step"
        ],
        "properties": {
          "step": {
            "type": "object",
            "required": [
              "execution_state_root",
              "finalized_header_root",
              "finalized_slot",
              "participation",
              "proof_a",
              "proof_b",
              "proof_c"
            ],
            "properties": {
              "execution_state_root": {
                "type": "string"
              },
              "finalized_header_root": {
                "type": "string"
              },
              "finalized_slot": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "participation": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "proof_a": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2
              },
              "proof_b": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2
                },
                "maxItems": 2,
                "minItems": 2
              },
              "proof_c": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "rotate"
        ],
        "properties": {
          "rotate": {
            "type": "object",
            "required": [
              "execution_state_root",
              "finalized_header_root",
              "finalized_slot",
              "participation",
              "rotate_proof_a",
              "rotate_proof_b",
              "rotate_proof_c",
              "step_proof_a",
              "step_proof_b",
              "step_proof_c",
              "sync_committee_poseidon",
              "sync_committee_ssz"
            ],
            "properties": {
              "execution_state_root": {
                "type": "string"
              },
              "finalized_header_root": {
                "type": "string"
              },
              "finalized_slot": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "participation": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "rotate_proof_a": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2
              },
              "rotate_proof_b": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2
                },
                "maxItems": 2,
                "minItems": 2
              },
              "rotate_proof_c": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2
              },
              "step_proof_a": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2
              },
              "step_proof_b": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 2,
                  "minItems": 2
                },
                "maxItems": 2,
                "minItems": 2
              },
              "step_proof_c": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2
              },
              "sync_committee_poseidon": {
                "type": "string"
              },
              "sync_committee_ssz": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "force"
        ],
        "properties": {
          "force": {
            "type": "object",
            "required": [
              "period"
            ],
            "properties": {
              "period": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Message type for `query` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_sync_committee_period"
        ],
        "properties": {
          "get_sync_committee_period": {
            "type": "object",
            "required": [
              "slot"
            ],
            "properties": {
              "slot": {
                "$ref": "#/definitions/Uint256"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_current_slot"
        ],
        "properties": {
          "get_current_slot": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint256": {
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "Message type for `migrate` entry_point",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "get_current_slot": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetCurrentSlotResponse",
      "type": "object",
      "required": [
        "slot"
      ],
      "properties": {
        "slot": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    },
    "get_sync_committee_period": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSyncCommitteePeriodResponse",
      "type": "object",
      "required": [
        "period"
      ],
      "properties": {
        "period": {
          "$ref": "#/definitions/Uint256"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
          "type": "string"
        }
      }
    }
  }
}
