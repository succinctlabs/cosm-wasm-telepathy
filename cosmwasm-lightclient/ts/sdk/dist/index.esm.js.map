{"version":3,"file":"index.esm.js","sources":["../src/contracts/Verifier.types.ts","../src/contracts/Verifier.client.ts","../src/contracts/index.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nexport interface InstantiateMsg {\n  genesis_time: number;\n  genesis_validators_root: number[];\n  seconds_per_slot: number;\n  slots_per_period: number;\n  sync_committee_period: number;\n  sync_committee_poseidon: number[];\n}\nexport type ExecuteMsg = {\n  step: {\n    execution_state_root: number[];\n    finalized_header_root: number[];\n    finalized_slot: number;\n    participation: number;\n    proof_a: string[];\n    proof_b: string[][];\n    proof_c: string[];\n  };\n} | {\n  rotate: {\n    execution_state_root: number[];\n    finalized_header_root: number[];\n    finalized_slot: number;\n    participation: number;\n    rotate_proof_a: string[];\n    rotate_proof_b: string[][];\n    rotate_proof_c: string[];\n    step_proof_a: string[];\n    step_proof_b: string[][];\n    step_proof_c: string[];\n    sync_committee_poseidon: number[];\n    sync_committee_ssz: number[];\n  };\n} | {\n  force: {\n    period: Uint256;\n  };\n};\nexport type Uint256 = string;\nexport type QueryMsg = {\n  get_sync_committee_period: {\n    slot: Uint256;\n  };\n} | {\n  get_current_slot: {};\n};\nexport type MigrateMsg = string;\nexport interface GetCurrentSlotResponse {\n  slot: Uint256;\n}\nexport interface GetSyncCommitteePeriodResponse {\n  period: Uint256;\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nimport { InstantiateMsg, ExecuteMsg, Uint256, QueryMsg, MigrateMsg, GetCurrentSlotResponse, GetSyncCommitteePeriodResponse } from \"./Verifier.types\";\nexport interface VerifierReadOnlyInterface {\n  contractAddress: string;\n  getSyncCommitteePeriod: ({\n    slot\n  }: {\n    slot: Uint256;\n  }) => Promise<GetSyncCommitteePeriodResponse>;\n  getCurrentSlot: () => Promise<GetCurrentSlotResponse>;\n}\nexport class VerifierQueryClient implements VerifierReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getSyncCommitteePeriod = this.getSyncCommitteePeriod.bind(this);\n    this.getCurrentSlot = this.getCurrentSlot.bind(this);\n  }\n\n  getSyncCommitteePeriod = async ({\n    slot\n  }: {\n    slot: Uint256;\n  }): Promise<GetSyncCommitteePeriodResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_sync_committee_period: {\n        slot\n      }\n    });\n  };\n  getCurrentSlot = async (): Promise<GetCurrentSlotResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_current_slot: {}\n    });\n  };\n}\nexport interface VerifierInterface extends VerifierReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  step: ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    proofA,\n    proofB,\n    proofC\n  }: {\n    executionStateRoot: number[];\n    finalizedHeaderRoot: number[];\n    finalizedSlot: number;\n    participation: number;\n    proofA: string[];\n    proofB: string[][];\n    proofC: string[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  rotate: ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    rotateProofA,\n    rotateProofB,\n    rotateProofC,\n    stepProofA,\n    stepProofB,\n    stepProofC,\n    syncCommitteePoseidon,\n    syncCommitteeSsz\n  }: {\n    executionStateRoot: number[];\n    finalizedHeaderRoot: number[];\n    finalizedSlot: number;\n    participation: number;\n    rotateProofA: string[];\n    rotateProofB: string[][];\n    rotateProofC: string[];\n    stepProofA: string[];\n    stepProofB: string[][];\n    stepProofC: string[];\n    syncCommitteePoseidon: number[];\n    syncCommitteeSsz: number[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  force: ({\n    period\n  }: {\n    period: Uint256;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class VerifierClient extends VerifierQueryClient implements VerifierInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.step = this.step.bind(this);\n    this.rotate = this.rotate.bind(this);\n    this.force = this.force.bind(this);\n  }\n\n  step = async ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    proofA,\n    proofB,\n    proofC\n  }: {\n    executionStateRoot: number[];\n    finalizedHeaderRoot: number[];\n    finalizedSlot: number;\n    participation: number;\n    proofA: string[];\n    proofB: string[][];\n    proofC: string[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      step: {\n        execution_state_root: executionStateRoot,\n        finalized_header_root: finalizedHeaderRoot,\n        finalized_slot: finalizedSlot,\n        participation,\n        proof_a: proofA,\n        proof_b: proofB,\n        proof_c: proofC\n      }\n    }, fee, memo, funds);\n  };\n  rotate = async ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    rotateProofA,\n    rotateProofB,\n    rotateProofC,\n    stepProofA,\n    stepProofB,\n    stepProofC,\n    syncCommitteePoseidon,\n    syncCommitteeSsz\n  }: {\n    executionStateRoot: number[];\n    finalizedHeaderRoot: number[];\n    finalizedSlot: number;\n    participation: number;\n    rotateProofA: string[];\n    rotateProofB: string[][];\n    rotateProofC: string[];\n    stepProofA: string[];\n    stepProofB: string[][];\n    stepProofC: string[];\n    syncCommitteePoseidon: number[];\n    syncCommitteeSsz: number[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      rotate: {\n        execution_state_root: executionStateRoot,\n        finalized_header_root: finalizedHeaderRoot,\n        finalized_slot: finalizedSlot,\n        participation,\n        rotate_proof_a: rotateProofA,\n        rotate_proof_b: rotateProofB,\n        rotate_proof_c: rotateProofC,\n        step_proof_a: stepProofA,\n        step_proof_b: stepProofB,\n        step_proof_c: stepProofC,\n        sync_committee_poseidon: syncCommitteePoseidon,\n        sync_committee_ssz: syncCommitteeSsz\n      }\n    }, fee, memo, funds);\n  };\n  force = async ({\n    period\n  }: {\n    period: Uint256;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      force: {\n        period\n      }\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Verifier.types\";\nimport * as _1 from \"./Verifier.client\";\nexport namespace contracts {\n  export const Verifier = { ..._0,\n    ..._1\n  };\n}"],"names":[],"mappings":"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"}