{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/Verifier.client.ts","../src/contracts/index.ts"],"sourcesContent":["/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nimport { InstantiateMsg, ExecuteMsg, QueryMsg, Uint256, MigrateMsg, GetCurrentSlotResponse, GetSyncCommitteePeriodResponse } from \"./Verifier.types\";\nexport interface VerifierReadOnlyInterface {\n  contractAddress: string;\n  getSyncCommitteePeriod: ({\n    slot\n  }: {\n    slot: Uint256;\n  }) => Promise<GetSyncCommitteePeriodResponse>;\n  getCurrentSlot: () => Promise<GetCurrentSlotResponse>;\n}\nexport class VerifierQueryClient implements VerifierReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getSyncCommitteePeriod = this.getSyncCommitteePeriod.bind(this);\n    this.getCurrentSlot = this.getCurrentSlot.bind(this);\n  }\n\n  getSyncCommitteePeriod = async ({\n    slot\n  }: {\n    slot: Uint256;\n  }): Promise<GetSyncCommitteePeriodResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_sync_committee_period: {\n        slot\n      }\n    });\n  };\n  getCurrentSlot = async (): Promise<GetCurrentSlotResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_current_slot: {}\n    });\n  };\n}\nexport interface VerifierInterface extends VerifierReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  step: ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    proofA,\n    proofB,\n    proofC\n  }: {\n    executionStateRoot: string;\n    finalizedHeaderRoot: string;\n    finalizedSlot: number;\n    participation: number;\n    proofA: string[];\n    proofB: string[][];\n    proofC: string[];\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  rotate: ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    rotateProofA,\n    rotateProofB,\n    rotateProofC,\n    stepProofA,\n    stepProofB,\n    stepProofC,\n    syncCommitteePoseidon,\n    syncCommitteeSsz\n  }: {\n    executionStateRoot: string;\n    finalizedHeaderRoot: string;\n    finalizedSlot: number;\n    participation: number;\n    rotateProofA: string[];\n    rotateProofB: string[][];\n    rotateProofC: string[];\n    stepProofA: string[];\n    stepProofB: string[][];\n    stepProofC: string[];\n    syncCommitteePoseidon: string;\n    syncCommitteeSsz: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n  force: ({\n    period\n  }: {\n    period: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;\n}\nexport class VerifierClient extends VerifierQueryClient implements VerifierInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.step = this.step.bind(this);\n    this.rotate = this.rotate.bind(this);\n    this.force = this.force.bind(this);\n  }\n\n  step = async ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    proofA,\n    proofB,\n    proofC\n  }: {\n    executionStateRoot: string;\n    finalizedHeaderRoot: string;\n    finalizedSlot: number;\n    participation: number;\n    proofA: string[];\n    proofB: string[][];\n    proofC: string[];\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      step: {\n        execution_state_root: executionStateRoot,\n        finalized_header_root: finalizedHeaderRoot,\n        finalized_slot: finalizedSlot,\n        participation,\n        proof_a: proofA,\n        proof_b: proofB,\n        proof_c: proofC\n      }\n    }, fee, memo, funds);\n  };\n  rotate = async ({\n    executionStateRoot,\n    finalizedHeaderRoot,\n    finalizedSlot,\n    participation,\n    rotateProofA,\n    rotateProofB,\n    rotateProofC,\n    stepProofA,\n    stepProofB,\n    stepProofC,\n    syncCommitteePoseidon,\n    syncCommitteeSsz\n  }: {\n    executionStateRoot: string;\n    finalizedHeaderRoot: string;\n    finalizedSlot: number;\n    participation: number;\n    rotateProofA: string[];\n    rotateProofB: string[][];\n    rotateProofC: string[];\n    stepProofA: string[];\n    stepProofB: string[][];\n    stepProofC: string[];\n    syncCommitteePoseidon: string;\n    syncCommitteeSsz: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      rotate: {\n        execution_state_root: executionStateRoot,\n        finalized_header_root: finalizedHeaderRoot,\n        finalized_slot: finalizedSlot,\n        participation,\n        rotate_proof_a: rotateProofA,\n        rotate_proof_b: rotateProofB,\n        rotate_proof_c: rotateProofC,\n        step_proof_a: stepProofA,\n        step_proof_b: stepProofB,\n        step_proof_c: stepProofC,\n        sync_committee_poseidon: syncCommitteePoseidon,\n        sync_committee_ssz: syncCommitteeSsz\n      }\n    }, fee, memo, funds);\n  };\n  force = async ({\n    period\n  }: {\n    period: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      force: {\n        period\n      }\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the @cosmwasm/ts-codegen generate command to regenerate this file.\n*/\n\nimport * as _0 from \"./Verifier.types\";\nimport * as _1 from \"./Verifier.client\";\nexport namespace contracts {\n  export const Verifier = { ..._0,\n    ..._1\n  };\n}"],"names":["VerifierQueryClient","client","contractAddress","_this","this","getSyncCommitteePeriod","_a","slot","queryContractSmart","get_sync_committee_period","getCurrentSlot","__awaiter","get_current_slot","bind","VerifierClient","_super","sender","call","step","fee","memo","funds","executionStateRoot","finalizedHeaderRoot","finalizedSlot","participation","proofA","proofB","proofC","execute","execution_state_root","finalized_header_root","finalized_slot","proof_a","proof_b","proof_c","_b","rotate","rotateProofA","rotateProofB","rotateProofC","stepProofA","stepProofB","stepProofC","syncCommitteePoseidon","syncCommitteeSsz","rotate_proof_a","rotate_proof_b","rotate_proof_c","step_proof_a","step_proof_b","step_proof_c","sync_committee_poseidon","sync_committee_ssz","force","period","__extends","exports","contracts","Verifier","__assign","_0","_1"],"mappings":"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"}