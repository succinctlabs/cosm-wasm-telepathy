/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint256, MigrateMsg, GetCurrentSlotResponse, GetSyncCommitteePeriodResponse } from "./Verifier.types";
export interface VerifierReadOnlyInterface {
  contractAddress: string;
  getSyncCommitteePeriod: ({
    slot
  }: {
    slot: Uint256;
  }) => Promise<GetSyncCommitteePeriodResponse>;
  getCurrentSlot: () => Promise<GetCurrentSlotResponse>;
}
export class VerifierQueryClient implements VerifierReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getSyncCommitteePeriod = this.getSyncCommitteePeriod.bind(this);
    this.getCurrentSlot = this.getCurrentSlot.bind(this);
  }

  getSyncCommitteePeriod = async ({
    slot
  }: {
    slot: Uint256;
  }): Promise<GetSyncCommitteePeriodResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sync_committee_period: {
        slot
      }
    });
  };
  getCurrentSlot = async (): Promise<GetCurrentSlotResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_current_slot: {}
    });
  };
}
export interface VerifierInterface extends VerifierReadOnlyInterface {
  contractAddress: string;
  sender: string;
  step: ({
    executionStateRoot,
    finalizedHeaderRoot,
    finalizedSlot,
    participation,
    proofA,
    proofB,
    proofC
  }: {
    executionStateRoot: string;
    finalizedHeaderRoot: string;
    finalizedSlot: number;
    participation: number;
    proofA: string[];
    proofB: string[][];
    proofC: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  rotate: ({
    executionStateRoot,
    finalizedHeaderRoot,
    finalizedSlot,
    participation,
    rotateProofA,
    rotateProofB,
    rotateProofC,
    stepProofA,
    stepProofB,
    stepProofC,
    syncCommitteePoseidon,
    syncCommitteeSsz
  }: {
    executionStateRoot: string;
    finalizedHeaderRoot: string;
    finalizedSlot: number;
    participation: number;
    rotateProofA: string[];
    rotateProofB: string[][];
    rotateProofC: string[];
    stepProofA: string[];
    stepProofB: string[][];
    stepProofC: string[];
    syncCommitteePoseidon: string;
    syncCommitteeSsz: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  force: ({
    period
  }: {
    period: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class VerifierClient extends VerifierQueryClient implements VerifierInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.step = this.step.bind(this);
    this.rotate = this.rotate.bind(this);
    this.force = this.force.bind(this);
  }

  step = async ({
    executionStateRoot,
    finalizedHeaderRoot,
    finalizedSlot,
    participation,
    proofA,
    proofB,
    proofC
  }: {
    executionStateRoot: string;
    finalizedHeaderRoot: string;
    finalizedSlot: number;
    participation: number;
    proofA: string[];
    proofB: string[][];
    proofC: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      step: {
        execution_state_root: executionStateRoot,
        finalized_header_root: finalizedHeaderRoot,
        finalized_slot: finalizedSlot,
        participation,
        proof_a: proofA,
        proof_b: proofB,
        proof_c: proofC
      }
    }, fee, memo, funds);
  };
  rotate = async ({
    executionStateRoot,
    finalizedHeaderRoot,
    finalizedSlot,
    participation,
    rotateProofA,
    rotateProofB,
    rotateProofC,
    stepProofA,
    stepProofB,
    stepProofC,
    syncCommitteePoseidon,
    syncCommitteeSsz
  }: {
    executionStateRoot: string;
    finalizedHeaderRoot: string;
    finalizedSlot: number;
    participation: number;
    rotateProofA: string[];
    rotateProofB: string[][];
    rotateProofC: string[];
    stepProofA: string[];
    stepProofB: string[][];
    stepProofC: string[];
    syncCommitteePoseidon: string;
    syncCommitteeSsz: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      rotate: {
        execution_state_root: executionStateRoot,
        finalized_header_root: finalizedHeaderRoot,
        finalized_slot: finalizedSlot,
        participation,
        rotate_proof_a: rotateProofA,
        rotate_proof_b: rotateProofB,
        rotate_proof_c: rotateProofC,
        step_proof_a: stepProofA,
        step_proof_b: stepProofB,
        step_proof_c: stepProofC,
        sync_committee_poseidon: syncCommitteePoseidon,
        sync_committee_ssz: syncCommitteeSsz
      }
    }, fee, memo, funds);
  };
  force = async ({
    period
  }: {
    period: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      force: {
        period
      }
    }, fee, memo, funds);
  };
}