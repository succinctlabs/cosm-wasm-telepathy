/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint256, GetCurrentSlotResponse, GetSyncCommitteePeriodResponse } from "./Verifier.types";
export interface VerifierReadOnlyInterface {
    contractAddress: string;
    getSyncCommitteePeriod: ({ slot }: {
        slot: Uint256;
    }) => Promise<GetSyncCommitteePeriodResponse>;
    getCurrentSlot: () => Promise<GetCurrentSlotResponse>;
}
export declare class VerifierQueryClient implements VerifierReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getSyncCommitteePeriod: ({ slot }: {
        slot: Uint256;
    }) => Promise<GetSyncCommitteePeriodResponse>;
    getCurrentSlot: () => Promise<GetCurrentSlotResponse>;
}
export interface VerifierInterface extends VerifierReadOnlyInterface {
    contractAddress: string;
    sender: string;
    step: ({ executionStateRoot, finalizedHeaderRoot, finalizedSlot, participation, proofA, proofB, proofC }: {
        executionStateRoot: string;
        finalizedHeaderRoot: string;
        finalizedSlot: number;
        participation: number;
        proofA: string[];
        proofB: string[][];
        proofC: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    rotate: ({ executionStateRoot, finalizedHeaderRoot, finalizedSlot, participation, rotateProofA, rotateProofB, rotateProofC, stepProofA, stepProofB, stepProofC, syncCommitteePoseidon, syncCommitteeSsz }: {
        executionStateRoot: string;
        finalizedHeaderRoot: string;
        finalizedSlot: number;
        participation: number;
        rotateProofA: string[];
        rotateProofB: string[][];
        rotateProofC: string[];
        stepProofA: string[];
        stepProofB: string[][];
        stepProofC: string[];
        syncCommitteePoseidon: string;
        syncCommitteeSsz: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    force: ({ period }: {
        period: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class VerifierClient extends VerifierQueryClient implements VerifierInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    step: ({ executionStateRoot, finalizedHeaderRoot, finalizedSlot, participation, proofA, proofB, proofC }: {
        executionStateRoot: string;
        finalizedHeaderRoot: string;
        finalizedSlot: number;
        participation: number;
        proofA: string[];
        proofB: string[][];
        proofC: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    rotate: ({ executionStateRoot, finalizedHeaderRoot, finalizedSlot, participation, rotateProofA, rotateProofB, rotateProofC, stepProofA, stepProofB, stepProofC, syncCommitteePoseidon, syncCommitteeSsz }: {
        executionStateRoot: string;
        finalizedHeaderRoot: string;
        finalizedSlot: number;
        participation: number;
        rotateProofA: string[];
        rotateProofB: string[][];
        rotateProofC: string[];
        stepProofA: string[];
        stepProofB: string[][];
        stepProofC: string[];
        syncCommitteePoseidon: string;
        syncCommitteeSsz: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    force: ({ period }: {
        period: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Verifier.client.d.ts.map